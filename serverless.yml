service: spot-service

provider:
  name: aws
  runtime: java8
  timeout: 20
  stage: dev
  region: eu-central-1
  apiKeys:
      - ${self:provider.stage}-letmego
  usagePlan:
    quota:
      limit: 50000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100
  iamRoleStatements:
  -  Effect: "Allow"
     Action:
       - "SNS:GetEndpointAttributes"
       - "SNS:CreatePlatformEndpoint"
       - "SNS:CreateTopic"
       - "SNS:Subscribe"
       - "SNS:Unsubscribe"
     Resource:
       - arn:aws:sns:*:*:*

# you can add packaging information here
package:
  artifact: build/distributions/spots_service.zip

functions:
  getCountries:
    handler: com.juvodu.serverless.handler.GetCountriesHandler
    events:
     - http:
          path: countries
          method: get
          cors: true
          private: true
  getSpots:
    handler: com.juvodu.serverless.handler.GetSpotsHandler
    events:
      - http:
          path: spots
          method: get
          cors: true
          private: true
  getSpot:
      handler: com.juvodu.serverless.handler.GetSpotHandler
      events:
        - http:
            path: spot
            method: get
            cors: true
            private: true
  createSpot:
    handler: com.juvodu.serverless.handler.CreateSpotHandler
    events:
      - http:
          path: spot/create
          method: post
          cors: true
          private: true
  deleteSpot:
    handler: com.juvodu.serverless.handler.DeleteSpotHandler
    events:
      - http:
          path: spot/delete
          method: post
          cors: true
          private: true
  updateSpot:
    handler: com.juvodu.serverless.handler.UpdateSpotHandler
    events:
      - http:
          path: spot/update
          method: post
          cors: true
          private: true
  getFavorite:
    handler: com.juvodu.serverless.handler.GetFavoritesHandler
    events:
      - http:
          path: favorites
          method: get
          cors: true
          private: true
  createFavorite:
    handler: com.juvodu.serverless.handler.CreateFavoriteHandler
    events:
      - http:
          path: favorite/create
          method: post
          cors: true
          private: true
  deleteFavorite:
    handler: com.juvodu.serverless.handler.DeleteFavoriteHandler
    events:
      - http:
          path: favorite/delete
          method: post
          cors: true
          private: true
  registerPush:
    handler: com.juvodu.serverless.handler.RegisterPushHandler
    events:
      - http:
          path: device/update
          method: post
          cors: true
          private: true
  cronSpot:
    handler: com.juvodu.serverless.handler.CronSpotHandler
    description: Scheduled Lambda to populate spots with current surf conditions
    timeout: 300
    events:
      - schedule:
          rate: rate(3 hours)

# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
resources:
  Resources:
    SubscriptionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: subscription
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: topicArn
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: user-topic-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: topicArn
                KeyType: RANGE
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    FavoriteTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: favorite
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: spotId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: spotId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SpotTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: spot
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: continent
            AttributeType: S
          - AttributeName: country
            AttributeType: S
          - AttributeName: geohash
            AttributeType: S
          - AttributeName: cronDate
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: continent-country-index
            KeySchema:
              - AttributeName: continent
                KeyType: HASH
              - AttributeName: country
                KeyType: RANGE
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: continent-geohash-index
            KeySchema:
              - AttributeName: continent
                KeyType: HASH
              - AttributeName: geohash
                KeyType: RANGE
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: continent-crondate-index
            KeySchema:
              - AttributeName: continent
                KeyType: HASH
              - AttributeName: cronDate
                KeyType: RANGE
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn:
        - SpotTable
        - UserTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:*:*:table/spot*
                - arn:aws:dynamodb:*:*:table/user*
                - arn:aws:dynamodb:*:*:table/favorite*
                - arn:aws:dynamodb:*:*:table/subscription*
        Roles:
          - Ref: IamRoleLambdaExecution

